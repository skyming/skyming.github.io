<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>skyming</title>
  <subtitle>我想要的一定会得到</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skyming.me/"/>
  <updated>2016-05-08T05:23:31.000Z</updated>
  <id>http://skyming.me/</id>
  
  <author>
    <name>skyming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 性能优化之业务性能监控</title>
    <link href="http://skyming.me/2016/05/08/iOS-Performance-Optimization-Time-md/"/>
    <id>http://skyming.me/2016/05/08/iOS-Performance-Optimization-Time-md/</id>
    <published>2016-05-08T05:19:23.000Z</published>
    <updated>2016-05-08T05:23:31.000Z</updated>
    
    <content type="html">&lt;p&gt;业务性能监控， 在人工的在业务的开始和结束处打点上报，然后后台统计达到监控目的，&lt;br&gt;是性能优化里比较重要的一个维度。具体来说就是测试方法操作执行的时间损耗，可能是同步&lt;br&gt;也可能是异步的。测试的方法大概有如下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种： NSDate 精确度可能是微秒（μs）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDate* tmpStartData = [NSDate date];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//You code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double deltaTime = [[NSDate date] timeIntervalSinceDate:tmpStartData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;cost time = %f s&quot;&lt;/span&gt;, deltaTime);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种：clock_t 精确度可能是微秒（μs）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clock_t start = clock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// dosomething&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock_t end = clock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;时间损耗 %f s&quot;&lt;/span&gt;, (double)(end - start)/CLOCKS_PER_SEC);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种：CFAbsoluteTime 精确度可能是微秒（μs）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//You code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFAbsoluteTime end = CFAbsoluteTimeGetCurrent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;cost time = %f s&quot;&lt;/span&gt;, end - start); &lt;span class=&quot;comment&quot;&gt;//s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第四种：CFTimeInterval 精确度纳秒（ns）&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFTimeInterval start = CACurrentMediaTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// dosomething&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFTimeInterval end = CACurrentMediaTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;时间损耗 = %f s&quot;&lt;/span&gt;, end - start);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第五种：mach_absolute_time 精确度纳秒（ns） &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint64_t start = mach_absolute_time ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// operation();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uint64_t end = mach_absolute_time ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uint64_t elapsed = &lt;span class=&quot;number&quot;&gt;1e-9&lt;/span&gt; *(end - start);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上五种方法，实际可用的是最后两种，这五种都有什么关系呢？&lt;br&gt;NSDate -&amp;gt; gettimeofday  -&amp;gt; mach_absolute_time&lt;br&gt;也就是说最终的来源还是 mach_absolute_time, gettimeofday 加入的时间同步机制。&lt;br&gt;CSDN：&lt;a href=&quot;http://blog.csdn.net/skymingst/article/details/41892445&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/skymingst/article/details/41892445&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mach_absolute_time 详解&lt;br&gt;&lt;a href=&quot;http://southpeak.github.io/blog/2014/09/23/xing-neng-yu-shi-jian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://southpeak.github.io/blog/2014/09/23/xing-neng-yu-shi-jian/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;clock_t 是不可靠的&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/chenyadong/archive/2011/12/03/2274783.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/chenyadong/archive/2011/12/03/2274783.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#####附录：&lt;/p&gt;
&lt;p&gt;mach_absolute_time 比较严格些的时间检测方法见下，中间参考了官方QA样例&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;增加了Block形式支持 –不推荐使用 T_T&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持单元测试标题输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持同步、异步测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;纳秒级精确度，默认是毫秒输出，精确度微秒&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/skyming/iOS-Performance-Optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/skyming/iOS-Performance-Optimization&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;业务性能监控， 在人工的在业务的开始和结束处打点上报，然后后台统计达到监控目的，&lt;br&gt;是性能优化里比较重要的一个维度。具体来说就是测试方法操作执行的时间损耗，可能是同步&lt;br&gt;也可能是异步的。测试的方法大概有如下五种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种： NSDat
    
    </summary>
    
      <category term="技术" scheme="http://skyming.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="性能优化" scheme="http://skyming.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS 文档生成工具</title>
    <link href="http://skyming.me/2016/03/14/appledoc-guide/"/>
    <id>http://skyming.me/2016/03/14/appledoc-guide/</id>
    <published>2016-03-14T10:40:35.000Z</published>
    <updated>2016-03-14T10:53:27.000Z</updated>
    
    <content type="html">&lt;p&gt;做SDK的，文档是必须的。今天整理了一些生成文档的工具。在代码写注释的同时，可以从源码中抽取文档。是不是一个非常神奇的工具。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;后续补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tomaz/appledoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;appledoc &lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2012/02/01/use-appledoc-to-generate-xcode-doc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;唐巧的技术博客&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ibireme.com/2013/08/26/appledoc-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;YY系列大神博客&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;做SDK的，文档是必须的。今天整理了一些生成文档的工具。在代码写注释的同时，可以从源码中抽取文档。是不是一个非常神奇的工具。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;后续补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tomaz/appledoc&quot; 
    
    </summary>
    
      <category term="技术" scheme="http://skyming.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="注释" scheme="http://skyming.me/tags/%E6%B3%A8%E9%87%8A/"/>
    
      <category term="appledoc" scheme="http://skyming.me/tags/appledoc/"/>
    
      <category term="文档" scheme="http://skyming.me/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Github + Hexo 搭建个人博客</title>
    <link href="http://skyming.me/2016/03/11/github-hexo/"/>
    <id>http://skyming.me/2016/03/11/github-hexo/</id>
    <published>2016-03-11T06:28:44.000Z</published>
    <updated>2016-03-11T09:33:16.000Z</updated>
    
    <content type="html">&lt;p&gt;hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，相比jekyll生成静态网页的速度更快。我使用hexo的原因是 hauk之前用过。哈哈，以下是一些不错的资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Hexo 文档&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;文档描述非常详细，而且是中文的，文档大概分为 开始使用、基本操作、自定义、常见问题 四个方面，不稳定的是有时候打不开需要 VPN 翻墙，在安装过程中也需要翻墙，某些主题也是需要翻墙才可以正常安装，否则样式会有问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zipperary.com/categories/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Zippera’s blog&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;Zippera’s blog 有个 Hexo 专题对在安装、主题安装、插件整合等过程，遇到的每个坑介绍的很详细，非常不错&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003880479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;SegmentFault 中扒到的一篇 hexo 实践经验谈&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;文章里面介绍了些 文章编辑细节问题，也分享了多说评论等不少实践经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hexojs/hexo/wiki/Themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;hexo 主题&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;各种 nice 主题等你拿。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，相比jekyll生成静态网页的速度更快。我使用hexo的原因是 hauk之前用过。哈哈，以下是一些不错的资源。&lt;/p&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://skyming.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://skyming.me/tags/Hexo/"/>
    
  </entry>
  
</feed>
