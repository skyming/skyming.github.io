<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 胡言乱语集 | OneV's Den]]></title>
  <link href="http://onevcat.com/category/hu-yan-luan-yu-ji/atom.xml" rel="self"/>
  <link href="http://onevcat.com/"/>
  <updated>2014-05-04T12:24:24+09:00</updated>
  <id>http://onevcat.com/</id>
  <author>
    <name><![CDATA[onevcat]]></name>
    <email><![CDATA[onev@onevcat.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[近期做的两三事]]></title>
    <link href="http://onevcat.com/2013/07/what-i-did-recently/"/>
    <updated>2013-07-21T10:47:00+09:00</updated>
    <id>http://onevcat.com/2013/07/what-i-did-recently</id>
    <content type="html"><![CDATA[<p>夏日炎炎，无心睡眠。</p>

<p>虽然已经有一段时间没有更新博客了，但是我确实是一直在努力干活儿的。这一个月以来大部分视线都在WWDC上，也写了几篇博文介绍个人觉得iOS7中需要深入挖掘和研究的API。但是因为NDA加上现在人在国外的缘故，还是不太好肆无忌惮地发出来。等到iOS7和Xcode5的NDA结束的时候（大概是9月中旬吧），我会一并把写的WWDC2013的笔记发出来，到时候还要请大家多多捧场。</p>

<p>另外在工作之外，也自己做了一些小项目，基本都是一些个人兴趣所致。虽然不值一提，但是还是想写下来主要作为记录。另外如果恰好能帮助到两三个同仁的话，那是最好不过。</p>

<h3>一个Xcode插件，VVDocumenter</h3>

<p>虽然ObjC代码因为其可读性极强，而不太需要时常查阅文档，但是其实对于大多数人（包括我自己）来说，可能为方法或变量取一个好名字并不是那么简单的事情。这时候可能就需要文档或者注释来帮助之后的开发者（包括大家自己）尽快熟悉和方便修改。但是用Xcode写文档是一件让人很头疼的事情，没有像VS之类的成熟IDE的方便的方法，一直以来都是依靠像Snippet这样的东西，然后自己辛苦填写大量已有的内容。</p>

<p>之前看到一个用<a href="http://blog.chukong-inc.com/index.php/2012/05/16/xcode4_fast_doxygen/">Ruby+系统服务来生成注释的方案</a>，但是每次要自己去选还要按快捷键，总觉得是很麻烦的事情。借鉴其他平台IDE一般都是采用三个斜杠（<code>///</code>）来生成文档注释的方法，所以也为Xcode写了一个类似的。用法很简单，在要写文档的代码上面连打三个斜杠，就能自动提取参数等生成规范的Javadoc格式文档注释。<strong>VVDocumenter</strong>整个项目MIT开源，并且扔在github上了，有兴趣的童鞋可以<a href="https://github.com/onevcat/VVDocumenter-Xcode">在这里</a>找到，欢迎大家加星fork以及给我发pull request来改善这个插件。</p>

<p><img src="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/ScreenShot.gif" alt="VVDocumenter演示" /></p>

<h3>一个Unity插件，UniRate</h3>

<p>做了一个叫<strong>UniRate</strong>的Unity插件，可以完全解决Unity移动端游戏请求用户评价的需求。对于一款应用/游戏来说，一般都会在你使用若干次/天之后弹一个邀请你评价的窗口，你可以选择是否到AppStore/Android Market进行评价或者稍后提醒。分别在iOS或者Android中实现这样的功能可以说是小菜一碟，但是Unity里现在暂时没有很好的方案。很可能你会需要花不少时间来实现一个类似功能，又或者要是你对native plugin这方面不太熟悉的话，可能就比较头疼了。</p>

<p>现在可以用UniRate来解决，添加的方法很简单，导入资源包，将里面的UniRateManager拖拽到scene中，就可以了..是的..没有第三步，这时候你已经有一个会监测用户使用并在安装3天并且使用10次后弹出一个提示评价的框，用户可以选择评价并跳转到相应页面了。如果你想做更多细节的调整和控制，可以参看这里的<a href="https://github.com/onevcat/UniRate/wiki/UniRate-Manual">用户手册</a>和<a href="http://unirate.onevcat.com/reference/class_uni_rate.html">在线文档</a>。</p>

<p><img src="http://img.onevcat.com/2013/UniRate.jpg" alt="UniRate" /></p>

<p>如果你感兴趣并且希望支持一下的话，UniRate现在可以在Unity Asset Store购买，<a href="https://www.assetstore.unity3d.com/#/content/10116">传送门在这里</a>。</p>

<h3>Oculus VR Rift</h3>

<p>如果你不知道Oculus的话，这里有张我的近照可以帮助你了解。</p>

<p><img src="http://img.onevcat.com/2013/oculus-me.png" alt="我的Oculus Rift" /></p>

<p>其实就是一个虚拟现实用的眼镜，可以直接在眼前塞满屏幕的设备。之前也有索尼之类的厂家出过类似的眼镜，但是Oculus最大的特点是全屏无黑边，可以说提供了和以往完全不同的沉浸式游戏体验。难能可贵的是，在此同时还能做到价格厚道（坊间传闻今后希望能做到本体免费）。</p>

<p>回到主题，自从体验过Oculus VR Rift以后，我就相信这会是游戏的未来和方向。于是之前就下了订单预定了开发者版本，今天总算是到货。Oculus对于我来说最大的优点是支持Unity3D，所以自己可以用它来做一些好玩儿的东西，算是门槛比较低。相信之后会有一段时间来学习适配Oculus的Unity开发，并且每天沉浸在创造自娱自乐的虚拟现实之中，希望这段时光能成为自己之后美好的回忆。我在之后也会找机会在博客里分享一些关于Unity和Oculus集成，以及开发Oculus适配的游戏的一些经验和方法。</p>

<p><strong>如果有可能的话，真希望自己能够做一款好玩的Oculus的游戏，或者找到一个做Oculus游戏的企业，去创造这个未来，改变世界。</strong></p>

<h3>XUPorter更新</h3>

<p><a href="https://github.com/onevcat/XUPorter">XUPorter</a>最早是写出来自己用的。因为每次从Unity build工程出来的时候，在Xcode里把各种依赖库拖来拖去简直是一件泯灭人性的事情。两年多前刚开始Unity的时候没有post build script这种东西，于是每次都要花上五到十分钟来配置Xcode的工程，时间一长就直接忘了需要依赖哪些文件和框架才能编译通过。后来有个post build脚本，但是每次写起来也很麻烦。XUPorter利用Unity3.5新加入的<code>PostProcessBuild</code>来根据配置修改Xcode工程文件，具体的介绍可以<a href="http://onevcat.com/2012/12/xuporter/">看这里</a>。之前就是往Github上一扔而已，很高兴的是，有一些项目开始使用XUPorter做管理了，也有热心人在Github上帮助维护这个项目。于是最近对其进行了一些更新，添加了第三方库的添加等一些功能。</p>

<p>如果有需要的朋友可以了解一下并使用，可以节省不少时间。如果觉得好，也欢迎帮助推荐和支持，让更多人知道并受益。最简单的方法就是在<a href="https://github.com/onevcat/XUPorter">项目的Github页面</a>加个星星～ :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈Objective-C的警告]]></title>
    <link href="http://onevcat.com/2013/05/talk-about-warning/"/>
    <updated>2013-05-24T09:52:00+09:00</updated>
    <id>http://onevcat.com/2013/05/talk-about-warning</id>
    <content type="html"><![CDATA[<blockquote><p>一个有节操的程序员会在乎自己的代码的警告，就像在乎饭碗边上有只死蟑螂那样。——<a href="http://weibo.com/onevcat">@onevcat</a></p></blockquote>

<h3>重视编译警告</h3>

<p>现在编译器有时候会很吵，而编译器给出的警告对开发者来说是很有用的信息。警告不会阻止继续编译和链接，也不会导致程序不能运行，但是很多时候编译器会先你一步发现问题所在，对于Objective-C来说特别如此。<a href="http://clang.llvm.org/">Clang</a>不仅对于明显的错误能够提出警告（比如某方法或者接口未实现），也能对很多潜在可能的问题做出提示（比如方法已经废弃或者有问题的转换），而这些问题在很多时候都可能成为潜在的致命错误，必须加以重视。</p>

<p>像Ruby或者PHP这样的动态语言没有所谓的编译警告，而C#或者Java这类语言的警告很多都是不得不照顾的废弃方法什么的，很多开发者已经习惯于忽略警告进行开发。OC由于现在由苹果负责维护，Clang的LLVM也同时是苹果在做，可以说从语言到编译器到SDK全局都在掌握之中，因此做OC开发时的警告往往比其他语言的警告更有参考价值。打开尽可能多的警告提示，并且在程序开发中尽量避免生成警告，对于构建一个健壮高效的程序来说，是必须的。</p>

<h3>在Xcode中开启额外警告提示</h3>

<p>Xcode的工程模板已经为我们设置开启了一些默认和常用的警告提示，这些默认设置为了兼容一些上年头的项目，并没有打开很多，仅是指对最危险和最常见的部分进行了警告。这对于一个新项目来说这是不够用的（至少对我来说是不够用的），在无数前辈大牛的教导下，首先要做的事情就是打开尽可能多的警告提示。</p>

<!-- more -->


<p>最简单的方法是通过UI来打开警告。在Xcode中，Build Setting选项里为我们预留了一些打开警告的开关，找到并直接勾选相应的选项就可以打开警告。大部分时间里选项本身已经足够能描述警告的作用和产生警告的时机，如果不是很明白的话，在右侧的Quick Help面板里有更详细的说明。对于OC开发来说特有的警告都在<code>Apple LLVM compiler 4.2 - Warnings - Objective C</code>一栏中，不管您是不是决定打开它们，都是值得花时间看一看加以了解的，因为它们都是写OC程序时最应该避免的情况。另外几个<code>Apple LLVM compiler 4.2 - Warnings - …</code>(All languages和C++)也包含了大量的选项，以方便控制警告产生。</p>

<p><img src="http://img.onevcat.com/2013/xcode-warning.png" alt="Xcode设置中的警告选项" /></p>

<p>当然在UI里一个一个点击激活警告虽然简单，但每次都这样来一回是一种一点也不有趣的做法，特别是在你已经了解它们的内容并决定打开它们的时候。在编译选项中加入合适的flag能够打开或者关闭警告：在Build Setting中的Other C Flags里添加形似<code>-W...</code>的编译标识。你可以在其中填写任意多的<code>-W...</code>以开关某些警告，比如，填写为<code>-Wall -Wno-unused-variable</code>即可打开“全部”警告（其实并不是全部，只是一大部分严重警告而已），但是不启用“未使用变量”的警告。使用<code>-W...</code>的形式，而不是在UI上勾选的一大好处是，在编译器版本更新时，新加入的警告如果包含在<code>-Wall</code>中的话，不需要对工程做任何修改，新的警告即可以生效。这样立即可以察觉到同一个工程由于编译器版本更新时可能带来的隐患。另外一个更重要的原因是..Xcode的UI并没有提供所有的警告 =_=||..</p>

<p>刚才提到的，需要注意的是，<code>-Wall</code>的名字虽然是all，但是这真的只是一个迷惑人的词语，实际上<code>-Wall</code>涵盖的仅只是所有警告中的一个子集。在<a href="http://programmers.stackexchange.com/questions/122608/clang-warning-flags-for-objective-c-development/124574#124574">StackExchange</a>上有一个在Google工作的Clang开发者进行的回答，其中解释了有一些重要的警告组：</p>

<ul>
<li>-Wall 并<strong>不是</strong>所有警告。这一个警告组开启的是编译器开发者对于“你所写的代码中有问题”这一命题有着很高的自信的那些警告。要是在这一组设定下你的代码出现了警告，那基本上就是你的代码真的存在严重问题了。但是同时，并不是说打开Wall就万事大吉了，因为Wall所针对的仅仅只是经典代码库中的为数不多的问题，因此有一些致命的警告并不能被其捕捉到。但是不论如何，因为Wall的警告提供的都是可信度和优先级很高的警告，所以为所有项目（至少是所有新项目）打开这组警告，应该成为一种良好的习惯。</li>
<li>-Wextra 如其所名，<code>-Wextra</code>组提供“额外的”警告。这个组和<code>-Wall</code>组几乎一样有用，但是有些情况下对于代码相对过于严苛。一个很常见的例子是，<code>-Wextra</code>中包含了<code>-Wsign-compare</code>，这个警告标识会开启比较时候对signed和unsigned的类型检查，当比较符两边一边是signed一边是unsigned时，产生警告。其实很多代码并没有特别在意这样的比较，而且绝大多数时候，比较signed和unsigned也是没有太大问题的（当然不排除会有致命错误出现的情况）。需要注意，<code>-Wextra</code>和<code>-Wall</code>是相互独立的两个警告组，虽然里面打开的警告标识有个别是重复的，但是两组并没有包含的关系。想要同时使用的话必须在Other C Flags中都加上</li>
<li>-Weverything 这个是真正的所有警告。但是一般开发者不会选择使用这个标识，因为它包含了那些还正在开发中的可能尚存bug的警告提示。这个标识一般是编译器开发者用来调试时使用的，如果你想在自己的项目里开启的话，警告一定会爆棚导致你想开始撞墙..</li>
</ul>


<p><img src="http://img.onevcat.com/2013/weverything.png" alt="-Wall和-Wextra下0警告的工程，在-Weverything下的表现，可以用惨不忍睹来形容" /></p>

<p>关于某个组开启了哪些警告的说明，在GCC的手册中有<a href="http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">一个参考</a>。虽然苹果现在用的都是LLVM了，但是这部分内容应该是继承了GCC的设定。</p>

<h3>控制警告，局部加入或关闭</h3>

<p>Clang提供了我们自己加入警告或者暂时关闭警告的办法。</p>

<p>强制加入一个警告：</p>

<p>```objc
//Generate a warning</p>

<h1>pragma message "Warning 1"</h1>

<p>//Another way to generate a warning</p>

<h1>warning "Warning 2"</h1>

<p>```</p>

<p>两种强制警告的方法在视觉效果上结果是一样的，但是警告类型略有不同，一个是<code>-W#pragma-messages</code>，另一个是<code>-W#warnings</code>。对于第二种写法，把warning换成error，可以强制使编译失败。比如在发布一些需要API Key之类的类库时，可以使用这个方法来提示别的开发者别忘了输入必要的信息。</p>

<p>```objc
//Generate an error to fail the build.</p>

<h1>error "Something wrong"</h1>

<p>```</p>

<p>对于关闭某个警告，如果需要全局关闭的话，直接在Other C Flags里写<code>-Wno-...</code>就行了，比如<code>-Wextra -Wno-sign-compare</code>就是一个常见的组合。如果相对某几个文件开启或禁用警告，在Build Phases的Compile Source相应的文件中加入对应的编译标识即可。如果只是想在某几行关闭某个警告的话，可以通过临时改变诊断编译标记来抑制指定类型的警告，具体如下：</p>

<p>```objc</p>

<h1>pragma clang diagnostic push</h1>

<h1>pragma clang diagnostic ignored "-Wunused-variable"</h1>

<p>int a;</p>

<h1>pragma clang diagnostic pop</h1>

<p>```</p>

<p>如果a之后没有被使用，也不会出未使用变量的警告了。对于想要抑制的警告类型的标识名，可以在build产生该警告后的build log中看到。Xcode中的话，快捷键Cmd+7然后点击最近的build log中，进入详细信息中就能看到了。</p>

<p><img src="http://img.onevcat.com/2013/warning-detail.png" alt="警告的详细信息，可以找到标识符" /></p>

<h3>我应该开启哪些警告提示</h3>

<p>个人喜好（代码洁癖）不同，会有不同的需求。我的建议是对于所有项目，特别是新开的项目，首先开启<code>-Wall</code>和<code>-Wextra</code>，然后在此基础上构建项目并且避免一切警告。如果在开发过程中遇到了某些确实无法解决或者确信自己的做法是正确的话（其实这种情况，你的做法一般即使不是错误的，也会是不那么正确的），可以有选择性地关闭某些警告。一般来说，关闭的警告项目不应该超过一只手能数出来的数字，否则一定哪儿出问题了..</p>

<h3>是否要让警告等于错误</h3>

<p>一种很常见的做法和代码洁癖是将警告标识为错误，从而中断编译过程。这让开发者不得不去修复这些警告，从而保持代码干净整洁。在Xcode中，可以通过勾选相应的Treat Warnings as Errors来开启，或者加入<code>-Werror</code>标识。我个人来说不喜欢使用这个设定，因为它总是打断开发流程。很多时候并不可能把代码全写完再编译调试，相反地，我更喜欢写一点就编译运行一下看看结果，这样在中间debug编译的时候会出现警告也不足为奇。另外，如果做TDD开发时，也可能会有大量正常的警告出现，如果有警告就不让编译的话，开发效率可能会打折扣。一个比较好的做法是只在Release Build时将警告视为错误，因为Xcode中是可以为Debug和Release分别指定标识的，所以这很容易做到。</p>

<p>另外也可以只把某些警告当作错误，<code>-Werror=...</code>即可，同样地，也可以在<code>-Werror</code>被激活时使用<code>-Wno-error=...</code>来使某些警告不成为错误。结合使用这些编译标识可以达到很好的控制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上级向的十个iOS面试问题]]></title>
    <link href="http://onevcat.com/2013/04/ios-interview/"/>
    <updated>2013-04-13T01:22:00+09:00</updated>
    <id>http://onevcat.com/2013/04/ios-interview</id>
    <content type="html"><![CDATA[<p><img src="http://img.onevcat.com/2013/welcome-to-xcode.png" alt="Welcome to Xcode" /></p>

<p>不管对于招聘和应聘来说，面试都是很重要的一个环节，特别对于开发者来说，面试中的技术问题环节不仅是企业对应聘者技能和积累的考察，也是一个开发者自我检验的好机会。对于iOS和Mac开发来说，因为本事还算比较新，企业对于这方面的开发者需求也比较大，所以面试时的要求可能并不是很高，一般能知道一些Cocoa和OC的基本知识也就认为可以了。但是对于一个希望拥有技术力基础的企业的iOS或者Mac开发来说，两到三个顶尖的熟练技术人员，带领一些还较为初级的开发者，共同完成项目应该是比较常见的构成。</p>

<p>Cocoa特别是CocoaTouch的开发，上手可以说十分容易，但是背后隐藏的细节和原理却很丰富。一方面对于基础不够熟练和清晰（比如从一个AppDelegate开始用代码构建ViewController，或者清晰地说明栈和堆之类的概念），另一方面对于更进阶的开发知之甚少（比如多线程、网络异步处理或者Core开头的各种框架等等）。这些内容十分重要，但是可能现在一般的iOS开发者或多或少都在这些问题上存在薄弱。在这里我整理了一份面向于较高层级的iOS开发者的面试题目的问题清单，列出了十个应聘Leader级别的高级Cocoa/CocoaTouch开发工程师所应该掌握和理解的技术。这份列表没有提供标准答案，因为这些问题本身就没有标准答案。随每个人对这些内容的认识的不同和理解的差异，可以有不一样的答案。但是最基本地，如果面对的是一名资深的Cocoa开发者，至少期望能得到的答案都是“接触过”，并且能结合自己的经验说个七七八八，达到互相能明白意图和方法的地步。能够在其中两三个领域有不错的见解和具体的阐述的话，那是更好。这种对于知识覆盖面和深度的考察很能真实反映出开发者的技术水平。如果清单里的很大部分内容都是完全没接触过和没听过的话，那可能距离资深Cocoa开发这样一个阶段还尚有距离了。</p>

<p>那么，面试开始。</p>

<!-- more -->


<ol>
<li>你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？</li>
<li>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</li>
<li>Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）</li>
<li>是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。</li>
<li>NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了...）</li>
<li>你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。</li>
<li>既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？</li>
<li>您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？</li>
<li>对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？</li>
<li>你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。</li>
</ol>


<p>以上10个问题对于初级或者刚接触iOS的开发者来说，肯定是过于难了。想要答出全部问题，可能需要至少两到三年的Cocoa/CocoaTouch开发经验。而如果想要有所见地的回答，可能需要更长的时间和经验。这些问题对于技术的积累会是一个很好的考察，因为如果没有对这些问题中涉及的内容有过实际使用和体会的话，是很难较完整和全面回答这些问题的。同时，因为这些问题并不像ABCD的客观题有标准答案，表现的是应聘者的理解，所以提问者也必须具备必要的材料或者知识，以应对可能的讨论。</p>

<p>在为团队寻求高级别的开发工程师或者Leader类的职位时，这些问题的回答会是对应聘者技术深度和广度的一个有效的考察。同样地，如果你的团队在Cocoa/CocoaTouch上比较偏重，但是技术团队的No.1的工程师却不能很好地回答这些问题的话，可能也会是需要检讨技术层的一个信号。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[赴日半年的一些杂感]]></title>
    <link href="http://onevcat.com/2013/04/half-year-in-japan/"/>
    <updated>2013-04-01T23:47:00+09:00</updated>
    <id>http://onevcat.com/2013/04/half-year-in-japan</id>
    <content type="html"><![CDATA[<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2013-03-09125056.jpg" alt="樱花之国" /></p>

<p>来日本已经足足有半年了，在这半年里见识了许多，也经历了许多。学生生涯的结束和职场生涯的开始，在这样的转变中积极投入到新的生活中去，大概也算是自己努力的一种方式。今天到公司很早，有机会整理一下这半年的一些体会和感想吧。</p>

<h2>关于日本</h2>

<p>其实日本对于中国和中国人来说，一直是个又爱又恨的国家。爱大抵是因为日本既有着无数的中国文化元素输入，同时又有着一大堆类似ACG的输出。前者拉近了中国与日本的距离，后者让世界有了解日本的窗口。而恨，基本都来源于七十多年前的那场战争。中国人的这种仇恨其实也并非与生俱来，而日本人也确实很难理解这种仇恨，我想这大抵和两个国家国民所受到的教育和舆论的导向不无关系。说到教育和舆论，中国的洗脑教育和言论管制估计在全球知名大国中是无出其右的。包括我在内，从小接受的就是长期而持续的仇恨教育灌输，所有能接触到的历史书籍中也都是宣扬两国民族仇恨的，我想这对于国人于日本的理解上造成了很大偏差。加上当代中国走了一些弯路，导致普遍性的国民信仰丢失和是非观的扭曲，导致了这种本不该存在的误解又进一步加深。</p>

<p>相反地，在日本不管是电视新闻还是报纸，我都极少见到有针对中国的宣传。其实基本上电视新闻都很少会报道日本国外的消息。经常见到的都是本地哪个居民楼发生了火灾，或者谁家走失的猫狗被发现并寻找失主这样的消息。而唯一有的政治节目的形式一般是一大堆人坐成个圆桌讨论的形式，即使这样还是会请来不同方面的人，更像是一种讨论。比如之前说到钓鱼岛的问题，人员构成是两个主持+两个日本政界+两个中国人+一个美国人这样的组合，一群人都站在自己的利益角度吵得不亦乐乎。这在国内现在的请“砖家”出来唠叨教导大众的媒体模式下，应该是不可能出现的。</p>

<p>但是同时，日本国民对于政治的不关心远远超出了我的想象，但是却正是一个这样对政治不关心的国家，却有着整个亚洲最民主的制度，这是一个很奇怪的现象。选举前几乎每天在车站都会有议员拿个喇叭宣扬自己党派和个人的理念思想，但路人匆匆都无人理睬（我想如果有人停下来和他辩论的话他也许会很开心）；到现在选举已经尘埃落定后也每周会有不同的政治家到处演说。在中国，就算在北京，你也绝不可能看到国家财政部或者人事部的部长在做街头演说，也没有可能直面总书记或者国家主席，但是这些事情我却都在日本经历了，而且是作为一个外国人在不经意间就都经历了。中日两国在政治上的差距，还很大很大，而中国想要走的民主道路（希望如此），也还很长很长。</p>

<!-- more -->


<p>其他的来说，印象最深刻的大抵就是和传说中一样的日本人的礼貌和以“耻文化”为基础的道德理念。虽然是在礼仪之邦长大的孩子，但是却是在这里感受到了更多的礼仪。服务行业就不用多说了，就算是普通生活中也会有很多的讲究。有时候真的不得不感慨是环境造就人的行为，在一个所有人都很互相尊重（至少是表面上互相尊重）的环境下，你也不得不学会去尊重别人。同样的，当人们都互相信任的时候，你也不由地变得愿意信任别人，这是一件让人感觉很好的事情。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-09-30121053.jpg" alt="随便一个书店里关于三国的架子，可能在中国都看不到这么多的有关书籍" /></p>

<p>另外就是日本真的是一个很喜欢读书的国家，这一点虽然不让我吃惊，但是当走在街上很容易就看到很多书店的时候还是有些赞叹的。在电子书籍和信息时代的今天，实体书可能更多的已经成为一种符号了，至少在快餐文化的中国是如此。实体书在日本的畅销，一方面是因为地铁和文库本的贡献，另一方面大概是因为日本本身文化封闭的特性吧（之后会展开说这点）。</p>

<h2>关于工作</h2>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2013-02-22085647.jpg" alt="面白法人Kayac的门牌" /></p>

<p>工作上并没有什么特别值得称道的地方，本来也是作为漫漫人生中修行的一站来到这里的，所以说更多的还是希望用心体会这边的工作的精髓，而并不是去刻意地达成某些目标。虽然日本是一个游戏制作的传统强国，但是可以感受到在当今欧美大作不断频现和日本游戏固步自封的双重作用下，日本的游戏产业正在逐渐没落。虽然在社交领域有DeNA或者GREE，在手游上有去年风光满满的Puzzle And Dragon，但是给人的印象就是这些大抵都是only for Japan的东西。日本游戏界可以说看不到和外界交流的意愿，现在的日本游戏越来越难走向世界，世界的优秀游戏也越来越难进入日本市场，这大抵还是和当今主流文化是英语文化圈的欧美文化但是日本从业人员整体英语水平并不够有一定关系吧。</p>

<p>除此之外，工作上还是很开心的。Kayac是一个很不错的公司，至少到现在我很享受在这里的工作。虽然加班是多了点，但是和最地狱的那段时间来说简直就是天堂（所以说趁着年轻过一些苦逼的日子是很有好处的，之后都会觉得比起以前不算什么）。不仅可以穿拖鞋汗衫进出公司，更可以每天面朝大海或者富士山写代码，这点比较惬意。</p>

<p>不过工作上需要特别提的，最好的地方是，可以和其他国家（不单单日本的，还有法国越南印尼什么）的程序员一起工作，这对我来说是一种非常奇妙的体验。以前很多时候认为是非常正常的事情，以及非常正常的写法，有时候却在不同文化背景下会发生了一些奇妙的变化。会发现原来每个国家的coder写出来的东西真的是会带有coder个人的文化背景和思考方法的，这是以前完全没有想到的事情。比如日本的程序员写出来的东西总是很工整，每个类的格式甚至是申明变量的顺序都很规范，但是往往却在很多地方写的很啰嗦复杂。在你完全了解他的结构之前，读这样的代码很是痛苦，无尽的跳转和条件经常让人崩溃，有时候甚至不得不佩服在如此复杂的代码下居然没有出错。而法国人的代码却完全不一样，写的结构那个飘逸那个散，还时不时带上几句法语注释，虽说配合Google Translate可以猜个大概，但还是让人哭笑不得。</p>

<p>Kayac的话据说有全日本最好的Perl程序员（或者说之一），但是很可惜我并不会也不想以Perl作为自己的开发语言，所以说基本没有交流，算是比较可惜。这边的话也有一些还算厉害的OC程序员和iOS开发者，有时候可以在网上看到一些他们的技术博客，也算不错。和其中一个在Kayac待了几年的大大玩的比较好，他居然还送了一本他写的OC的入门书给我，虽然说内容太基础对我没什么用处，但是这份情谊还是很珍贵的。</p>

<p>技术力上的话，Kayac或者是大部分日本企业（猜测）并不是具有很强的技术能力。不管是在选用框架和编码能力上大部分员工都还很入门的感觉。不过这大抵是因为重视的方面不同，我们可能更看重个人能力和解决问题的速度质量，但是他们更多的是喜欢在范式和规则之下完成任务。这样一来，制定规则的人，或者说是项目的负责人的业务能力也就直接导致了项目的质量和进度。不过正如@钟亮所说，很多时候跳出技术的层面来看这些就会豁然开朗，无非就是遵循的规则和追求目标的手段的不一致，绝大部分最终的产品不会有太多人在意其中的技术细节。</p>

<p>不过不管怎么样，技术强力还是很有好处的，一开始和同事互相不太认识的时候经常各种“被教导”和“被使唤”，后来逐渐实力被认可以后就转变成了总是“被请教”和“被提建议”。日本社会和日本人心态确实是会从骨子里尊敬强者，所以说想要立足以及赢得他们的尊重，只能迫使自己变得更强。</p>

<p>每天很快就能搞定自己的任务，但是这边整个公司或者国家的氛围就是要加班到很晚，所以自己也不好到点走人。于是就有了以前不敢想象的大把时间用于学习和提高。闲着没事儿会琢磨学一些新的语言，或者是想办法将现有知识更深入，也会有时间经常关心一些业界的最新动态，这些都会很有帮助，也希望它们最终能成为自己人生的积淀。</p>

<p>同时也在向日本人学习。不得不说一下现在在做的项目的Leader，是一个很有趣的人。年轻时候干的是潜水员，负责挖沉船探宝那种，后来体力逐渐跟不上，也考虑到相对危险，转行当了程序员。半路出家但是水平还不赖，更难能可贵的是一把年纪了却每天也还坚持学技术。从git到进阶C#再到模型和贴图入门什么的，我入职半年间，他案头的书都换了三四本。这种精神很让人佩服，也应当成为学习的榜样。</p>

<h2>关于生活</h2>

<p>关于这一点，嘛，至少可以不用待在北京吸毒气。在北京的时候因为空气的问题，经常咳嗽不舒服，每次沙尘的时候也完全不能出门。那时候雾霾还不叫雾霾，但是劣质空气不需要命名大家也心知肚明。一年中能见到蓝天的日子也屈指可数。别的不说，这边至少天蓝蓝，水蓝蓝，空气清新，多年的咳嗽到这边完全没有复发，这就比一切都强了。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-11-04140710-2.jpg" alt="东京彩虹桥" /></p>

<p>另外不需要因为户口什么的各种看派出所的脸色。印象里在日本我所得到的微笑和尊重比在国内加起来都多——不管是来自服务行业、政府部门还是平时接触的日本人。有时候仔细想想确实，纳税人辛辛苦苦创造的价值，却很大一部分得不到有效的利用。而去和自己供养的人打交道的时候，还要遭遇种种不便和蔑视。愤愤不平倒是没有，但心却拔凉拔凉。深知自己并不是二代，靠自己改变不了现状，剩下的选择就只有逃离（XD 当然没这么夸张的凄凉，只不过用脚投票也是现在的流行趋势是不）。</p>

<p>暂时就写这么多吧，之后的生活，再慢慢体会。顺便送上一副京都的红叶。顺便提一句，本文照片都是自己拍摄的，版权所有。因此如果想要借作他用的话，还请麻烦知会一声，如果合适，会考虑给您高清版本的图片。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/OneV-s-Den/half-year-in-japan/2012-11-23150218.jpg" alt="京都御所红叶" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学生时代的终焉]]></title>
    <link href="http://onevcat.com/2012/08/not-a-studen/"/>
    <updated>2012-08-11T00:00:00+09:00</updated>
    <id>http://onevcat.com/2012/08/not-a-studen</id>
    <content type="html"><![CDATA[<p><img src="http://www.onevcat.com/wp-content/uploads/2012/08/me.jpg" title="" alt="" /></p>

<p>距离研究生毕业，已经过去一个月了。在毕业季的离愁和从学生身份的转变的怅惘渐渐淡去时，大概是时候对我的整个的大学生涯做一个小结了。很多事情的记忆已经在时间的冲蚀中变得模糊了，但是也有一些事情比其他的琐事更深地印刻在了记忆之中，也许简单的梳理和回忆，无法把这七年刻画的细致入微，但是作为轮廓的勾勒和回顾，却已然绰绰有余了。（写完之后终于发现又被写成标准流水账了，这个从小学开始的写作文的毛病在不写博客两个月之后再次复发了哎…）</p>

<h3>悲剧的开始</h3>

<p>大学本科加上研究生，七年时间，说长不长，说短却也不短。在经历了中学时代的辉煌之后，我终于还是在大学里找到了自己真正的位置。如果大学不在清华，如果不在清华里可谓最变态的电子系，如果不在清华里可谓最变态的电子系中最变态的班的话，也许我的大学生活会完全不一样吧。</p>

<p>这里有在央视热门节目露过脸的高考状元，</p>

<p>这里有“百度一下”能检出几万条结果的全省第一，</p>

<p>这里有奥数好几块金牌的超级达人，</p>

<p>这里有中学带了五个社团还能考到第一的变态，</p>

<p>这里有之后叱咤清华被老师们认可为几十年难遇的特奖得主和学生会主席。</p>

<p>当然，这里还有我，一个基本是以倒数一二的成绩分到这个班的可怜的差生。虽然说来之前已经被打过预防针，但是我真的不知道，这七年，会这么开始。</p>

<p>当每个人都在叫嚷着自己不会啊考试要挂了啊的时候，我还暗自得意过自己貌似这些题都还算能做一做。最后结果出来发现自己在为自己的80分沾沾自喜的时候，周围基本都是一片95+，那种"你是一个傻逼"的打击对于那时的我来说着实不轻。对于从一个教育相对落后的地区出来的学生来说，这可能是很正常很普遍的现象，但是从遥遥领先到远远落后，这样的落差，一时间确实难以接受。不过几次下来，麻木之后，也就对自己所处的位置心安理得了。当时为自己找到的借口是这些东西别人高中里都学过或者接触过，而自己高中时一不搞竞赛二也从来没自己私下刻苦学习过，所以一开始起点就落后很多了。学习这个东西，就像F1赛车一样，发车的时候落后，之后想赶上的话，要付出的代价可要大得多，所以得过且过了…</p>

<h3>一点点改变</h3>

<p>还好之后不久便觉得这样的想法实在很可恶…大二的挂科犹如当头棒喝。本科有整整四年的时间，这比初中的三年和高中的三年都要多，而且这四年时间中真正属于自己的时间很多很多。想要努力学习的话，不一定能在这里出类拔萃，但是有所斩获却是毋庸置疑。有句话很好，上帝给每个人都基本公平地发了时间这种万能货币，而一个人，想要怎么样的生活，想要成为怎样的人，与他把时间这种货币用来换了什么有莫大关系。大一和大二的公共课程和电子通讯方向的学习让我感到十分疲惫，我感到的是时间的浪费。而这时正好有机会在专业上进行一个细分，可以选择继续电子或者转为微电子方向。
其实这个时候的境遇和我高一结束后文理分班和校区迁移那时候很像。高一的时候的状况真是糟糕透顶，每天上学放学路上疲惫不堪，加上进入高中时相似的心理落差（当然没有从高中到大学差距这么大），让我几乎无法专于学习了。当时也正好遇上了分班和校址迁移，让我有机会得到喘息，从而有了一个新的开始。我当然希望这次也能有同样的效果，于是毫不犹豫的选择了转到新的专业去。
事实证明了这是一个明智的选择。我也许真的是那种喜欢去适应，喜欢去改变的人吧。有时候奶酪被拿走了，总会喜欢去寻找更新鲜的奶酪，也许是自己潜意识中的那只嗅嗅，在不断指引着我吧（笑）。总之，在微电的这段时光还是很快乐的。在这里虽然在绩点上也没什么了不起的突破，但是却在感情上找到了归宿。其实这么说来，到现在为止，我在自己人生的每个阶段，都很好的完成了我的任务：小学初中是快乐地生活成长，高中考到一个很好的大学，大学时找到很好的伴侣。虽然种种不顺，但是看起来却是不折不扣的成功呐…</p>

<h3>继续努力</h3>

<p>在好不容易真正习惯了清华的生活的时候，本科也快毕业了。靠着本科后两年拉回来的绩点，在本科最后踩着线随大流保了研。那时候真的没有想过继续深造和工作哪个好，也不太明白读研意味着什么。只是盲目地从众，而等我真正明白的时候，硕士都已经快毕业了。</p>

<p>其实硕士期间我是很幸运的，因为遇到了一位真的非常非常非常开明的导师。对比起很多其他同学的导师，我的导师几乎具备了一切优点：发钱多，派活少，不push，除了不太请我们吃饭以外，已经和忘年交的朋友差不多了。所以在硕士阶段，属于自己的时间也有很多，也正是以此为条件，我有机会仔细思考我真正想要的和喜欢的东西是什么。</p>

<p>首先，肯定不是研究。一看论文就犯困，一做试验就想逃，这些特质决定了必然不会是一个好的科研人员。我一直认为很多科学研究是毫无意义并且对这个世界是不会有任何改变的（特别是在中国，对然这句话肯定是错的，不过这就是我的想法）。国内的科研环境，就我所看到的号称中国最好的大学之一来说，也满满充斥着拉关系跑经费，报批各种各样的项目，面临无穷无尽的审计，大家真正忙的一切，都和科研本身没什么关系，而最后往往就靠几个真正还不那么讨厌科研的学生的寒碜的所谓“成果”来应付课题最终检查。在这方面，我完全没有入门，也并不是太了解真正的科研的感觉应该是怎么样的。但是在这里，我体会到的是一种低效和浑噩，从真心里，我不喜欢这样的生活。</p>

<p>为了尽量不在科研上花过多的时间，我选了一个非常奇葩的研究方向，做着前人从未做过的试验。因为课题很新，和研究组里所有人的课题都基本没有交集，导师也对新的方法表示闻所未闻。于是我几乎失去了所有的来自研究组的指导和支持，独自一人在黑暗中摸索。但是好处是，我做的试验没有其他人做过，因此我的结果也就没有人能够给出权威的评判，因为在这个领域其实我就是权威。那种感觉，真心不错。</p>

<p>但是这样做的目的，其实是解放自己的时间。不再被无数的试验束缚的同时，我开始尝试走向高效，去做一些自己喜欢做的事情。其实，每个人在青春的时候都应该有那么一段奋斗的历史，这样才不至于在老去后回首时发现一片苍白。拥有狂热的兴趣爱好也罢，全身心地投入某件事情也罢，都会在十几年甚至几十年后成为一段非常美好的回忆。努力过做过，在这个世界上留下一些什么东西，能够时不时被人想起，有时候，存在感和被认同感，还是十分重要的。</p>

<h3>新的开始</h3>

<p>找工作的那段时间还是相当郁闷的。虽说好歹算是名校毕业，但是一样四处碰壁。首先我很个性的做了一份比较非主流的简历，这直接导致了所有的正统企业都把我拒之门外（其实应该是我把他们拒之门外吧，233）；接着，投出去的一些简历直接没有了回音，估计是没见过清华的学生去投他们，觉得是在调戏？但是我真的没有乱投简历啊，给了简历的企业都是我真的想去的地方啊；最后，给了笔试的企业的各种笔试基本都没通过，各种请你写出XX算法，写你妹啊我木有学过啊有木有..而且在我做了这些项目以后我就觉得算法什么的就是扯淡啊有木有，你招的是码农啊，又不是计算机科学家，你要的那些算法google一下不就完事儿了。</p>

<p>于是，我好像是被所有的中国企业抛弃了，或者好听一点的话，是中国这些企业都和自己相性不符吧，真的，没有任何一家中国企业愿意给我offer，无奈最后只能去日本了。</p>

<p>然后，顺利的毕业了。不过毕业前的那段日子还是相当难熬的，每天白天在实验室待一整天，做试验整理数据攒论文不亦乐乎，晚上到兼职的地方作项目有时候deadline前忙到夜里两三点的时候也有，周末两天为了之后的工作还要到北语上课。如此高强度的无休生活如果可能一个月两个月的话还好，再长的话可能真的要崩溃掉。幸运的是我没感到什么太大压力就撑下来了，可能以后遇到什么时间上的压力的话，想想这段狗一般的经历就能平静许多了吧…</p>

<p>离开清华的一个月里，都在北语混迹。每天过着标准的学生生活，上课，食堂，宿舍。只不过上课由模电课、数电课、工艺课变成了日语课、日语课、日语课，食堂由麻辣烫、煎鸡饭、铁板烧变成了超市鸡、超市鸡、超市鸡，宿舍从逛论坛、打魔兽、侃大山变成了写代码、写代码、写代码。不过还好这种生活也就还有两周就结束了，再之后是回家，好好待上一个月。这应该是我最后一个这么长的假期了吧，之后的新的生活，应该会很忙碌。
大学的生活，很值得回忆。不管以后怎样NB的我们，可能永远都忘不了这段SB的日子。如果用一句话总结这七年，那不妨抄一句游戏台词：虽有遗憾，却无后悔。</p>

<p>流水账结束。今后，祝自己天天开心，愿自己继续加油。</p>
]]></content>
  </entry>
  
</feed>
